name: CI Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-scan:
    name: Lint, Security Scan, Build & Docker
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # 4Ô∏è‚É£ Run npm audit fix to resolve known vulnerabilities
      - name: Fix known vulnerabilities
        run: npm audit fix || echo "Audit fix completed"

      # 5Ô∏è‚É£ Linting
      - name: Run Linter
        run: |
          npm install eslint
          npx eslint src --max-warnings=0

      # 6Ô∏è‚É£ Secret Detection
      - name: Detect secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          fail: true

      # 7Ô∏è‚É£ Trivy FS Scan (scan source code before build)
      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: 1
          format: 'table'

      # 8Ô∏è‚É£ Build React app
      - name: Build React app
        run: npm run build

      # 9Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üîü Build Docker Image
      - name: Build Docker image
        run: |
          docker build -t reactapp:latest .

      # 1Ô∏è‚É£1Ô∏è‚É£ Trivy Image Scan (after Docker build)
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: reactapp:latest
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: 1
          format: 'table'
